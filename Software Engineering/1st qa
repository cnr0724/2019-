Waterfall model은 전통적인 공학 모델로, requirement definition->design->implementation->test&evolution의 과정이
waterfall처럼 이뤄지기 때문에 붙여진 이름이다. Waterfall model의 전제 사항은 requirement definition에서 requirement,
즉 고객의 요구 사항이 define 가능할만큼 명확하다는 것인데 현실적으로 소프트웨어를 제작하는 과정에서 명확한 요구 사항이 있는 고객을
만나기란 쉬운 일이 아니다. Iterative model은 단계를 되돌아가 고객의 요구 사항을 전부 반영한 뒤 개발 단계가 끝났다고 보는 모델이기에
현실적으로 software engineering에 더 알맞다. Component-based model은 말 그대로 프로그램을 component가 모여 이루어진 system으로
보는 것이 전제인데, open source 기반의 개발 등 더 복잡하고 시류에 뒤처지지 않은 프로그램을 요구하는 최근의 흐름에 맞는 모델이라 볼 수 있다.
Iterative model 검색.
Component-based model 참고 자료:
http://www.computerscijournal.org/vol10no2/component-based-software-development-life-cycle-models-a-comparative-review/
+) 구축하고자 하는 시스템의 속성에 따라 달라짐.
Waterfall은 명확한 요구 사항이 있으며 기획 등의 단계를 완전히 이끌어낼 수 있는 시스템의 경우.
Waterfall e.g.: 수강신청 시스템?
Iterative은 사용자의 요구 사항이 자주 바뀔 경우/명확하지 않을 경우 제일 cost가 덜 드는 방법. 프로그램을 제작하는 상황에 따라 다름.
Component-based model는 조립해서 만드는 모델.

Maintainability(유지보수성): 소프트웨어가 미래 요구되는 사항들에 따라 잘 진화할 수 있는지 여부.(모듈화가 잘 되어있으면 유지보수성 높음.)
Dependability & security(신빙성과 보안): 소프트웨어가 믿을만한지, 보안 면에서 새는 부분 없이 잘 지켜질 수 있는지.
Efficiency(효율성): 시스템 리소스가 낭비되는 부분이 없음.
Acceptability(수용성): 목표로 하는 고객에게 적합해야 함. (이해하기 쉬움, 유용함, 경쟁력이 있음.)
Maintainability: The ability to change sometimes have to lower the other attributes.
For instance, extracting some parts in the system may foster the maintainability but lower the efficiency.

Validation vs verification
(test / review & code inspection)
Validation: To check if the software is right or wrong. 바른 소프트웨어를 빌드하고 있는가.
(about the program itself. test needed)
Verification: To check if the engineers are building the software by the right process, right way. 소프트웨어를 바르게 빌드하고 있는가.
(about the documents, design and code, methodology)

Software specification:
Customers and engineers define the software that is to be produced and the constraints on its operation.
Software development:
The software is designed and programmed.
Validation:
The software is checked to ensure that it is what the customer requires.
Evolution:
The software is modified to reflect changing customer and market requirements.

Stand-alone applications: Anti-virus software, financial software, CD game, 문서작성 프로그램, 스마트폰의 메모장.
Software that runs on its own without an internet connection
A portable application that doesn’t need to be installed on your computer
Interactive transaction-based applications:email, file share services dropbox, e-commerce. . .
Embedded control systems: IoT하면 쉽게 떠오르는 스마트홈 시스템, traffic control
