Part1
SW process와 generic models, fundamental process activities, Rational Unified Process.

The software process:
A structured set of activities required to develop a software system.
Specification/Design and implementation/Validation/Evolution are involved.
Software process descriptions are about the activities in the processes and the ordering
of the activities.

Plan-driven processes/Agile processes
Plan-driven: 프로젝트 시작할 때 어떤 activity를 할지, 어떻게 measuring할지 같은 걸 계획함.
(E.g., waterfall model)
Agile: 계획이 incremental하고 중간에 고객 요청 사항에 따라 달라지기 쉬움.

Software process models:
1. Waterfall model.
Plan-driven model. Specification과 development가 구별되어 있음.
문제: Process가 underway 된 뒤에 변경할 필요가 있어도 반영하기가 어려움.
Large systems engineering projects에서는 잘 쓰임. Parallel development가 가능하고 관리가 쉽기 때문.
2. Incremental development.
Plan-driven일 수도 있고 agile일 수도 있음. Specification, development and validation interleaved.
Benefit:
1) The cost of accommodating changing customer requirements is reduced.
그냥 수정 요청이 들어오면 그 부분이나 다음 버전에서 반영하면 되기 때문에 cost가 상대적으로 적음.
2) It is easier to get customer feedback on the development work that has been done.
어떻게 사용되는지 확인할 수 있는 시점이 비교적 빠르기 때문에 customer가 확인하고 빠른 시점에 수정 요청할 수
있음.
3) More rapid delivery and deployment of useful software to the customer is possible.
Waterfall보다 고객한테 빨리 전달돼서 쓸 수 있음.
문제:
1) The process is not visible.
매니저 입장에서는 주기적으로 어느 단계라고 측정해서 보여줄 필요가 있는데 시스템이 빨리 개발되면
매 버전을 반영하는 문서 만드는 것도 비효율적임.
2) System structure tends to degrade as new increments are added.
소프트웨어를 개선하기 위해서 시간 돈이 쓰이는 게 아닌 이상 그냥 바꾸는 건 문제를 야기할 확률이 높음.
그러면 미래엔 그거 개선하는 것도 어렵고 costly함. System maintainance하는데 한 서브시스템 변경하는 게
어떻게 되돌아오는지 알 수가 없다.
3. Reuse-oriented software engineering.
Plan-driven일 수도 있고 agile일 수도 있음. 이미 존재하는 component들을 모아서 시스템 만듬.
Component analysis->Requirements modification->System design with reuse->Development and integration.

Types of software component
Web services. Collections of objects. Stand-alone software systems.

Process activities. In sequence인지 interleaved인지...
1) Specification
The process of establishing what services are required and the constraints on the system's
operation and development.
어떤 기능들이 제공되어야 하는지, 시스템의 수행이나 개발에서 어떤 제약 사항이 존재하는지 명확히 하는 것.
The requirements engineering process:
Feasibility study->Feasibility report
->Requirements elicitation and analysis -> System models      ->
<->Requirements specification -> User and system requirements ->     Requirements document
<->Requirements validation                                    ->
2) Development(Design and implementation)
The process of converting the system specification into an executable system.
요구사항 명세서(system specification)을 바탕으로 실현 가능한 형태로 바꾸는 것.
Software design=A software structure that realizes the specification.
Implementation=Translating the structure into an executable program.
Design input: Platform information / Requirements specification / Data description
Design activities:
Architectural design(전체 구조랑 principal components, relationships랑 distribution identify)/
Interface design(system components 간 interface)/
Component design(각 system component 가져다 어떻게 작동할지 설계)/
Database design(System data structure 설계해서 데이터베이스에 어떻게 넣을지)
Design outputs: System architecture / Database specification / Interface specification /
Component specification
3) Validation
Verification and validation is intended to show that a system conforms to its specification(verification)
and meets the requirements of the system customer(validation).
Verification: checking, review.
Validation: system testing.(주된 목적이 그렇다는 것)
Testing은 크게 세개로 나뉨.
(1) Component testing: Component를 개발하는 개발자에 의해 하나하나 이루어지는 테스트.
Unit/module testing이라고 쓰기도 했음.
(1.5) Integration testing
(2) System testing: Testing of the system as a whole.
Testing of emergent properties가 여기서 처음 이뤄짐.
(2.5) Alpha-testing, beta-testing 등.
(3) Acceptance testing(인수 testing):
Testing with customer data to check that the system meets the customer's needs.
V-shaped model.
4) Evolution (Operation + maintainance)
비지니스 환경이 바뀐다든지 시스템과 관련된 표준이 바뀐다든지 해서 evolution 요구를 받게 됨.
그걸 수용해나가는 작업. 계속 사이클 반복됨.

Part2
Coping with change
큰 프로젝트에선 change가 있을 수밖에 없음.(Business change, new technology, changing platform)
Change=rework.
Change의 cost는 rework랑 새 기능을 implement하는 것 두 개 다 포함함.

Reducing the costs of rework
1. Change avoidance.
Software process includes activities that can anticipate possible changes before significant
rework is required.
변화 자체가 별로 없게끔 함.
Software prototyping:
Prototype= initial version of a system used to demonstrate concepts and try out design options.
A prototype can be used in:
The requirements engineering process to help with requirements elicitation and validation.
In design processes to explore options and develop a UI design
In the testing process to run back-to-back tests.
[Benefit:
Improved system usability.
A closer match to users' real needs.
Improved design quality & maintainability.
Reduced development effort.]
Prototype development
May be based on rapid prototyping languages or tools.
May involve leaving out functionality.
프로토타입은 그 자체도 비용이 들고 error checking & recovery가 어려움.
Functional한 요소에 포커싱이 돼서 non-functional한 부분을 평가하기는 어려움.
Throw-away prototype: prototype은 개발 이후에 discarded 되어야 함.
(Production system에 좋은 바탕은 못 됨) 주로 여기까지를 목적으로 하는 게 바람직함.
Exploratory prototype.
Incremetal delivery: Single delivery 외에 increments로 나눠서 delivery할 수도 있음.
User requirements are prioritized and the highest priority requirements are included in
early increments.
Once the development of an increment is started, the requirements are frozen though requirements
for later increments can continue to evolve.
2. Change tolerance.
The process is designed so that changes can be accommodated at relatively low cost.
변화는 일어날 수밖에 없으니 일어나더라도 그 비용을 최소화할 수 있게 함.
Incremental development:
Normal approach used in agile methods.
Evaluation done by user/customer proxy.
Incremental delivery:
Realistic evaluation.
Advantages:
1)Customer value can be delivered with each increment.
2)Early increments act a prototype to help elicit requirements for later increments.
3)Lower risk of overall project failure.
4)The highest priority system services tend to receive the most testing.
Problem:
1) A set of basic facilities.(common facilities identify가 어려울 수 있음.)
2) The essence of iterative processes is that the specification is developed in conjunction
with the software.
This conflicts with the procurement model of many organizations.

Boehm's risk-based spiral model.
Process is represented as a spiral rather than as a sequence of activities with backtracking.
스파이럴 모델의 특징은 분면 따라 달라진다는 것.
제 2사분면: 목적, constraint. Alternative.
제 1사분면: risk...그에 따라 목표 다시 설정할 수도 있고 다음으로 넘어갈수도 있음.
제 4사분면: Engineering.
제 3사분면: 그냥 어...넘어감....

The rational unified process.
A modern generic process derived from the work on the UML and associated process.
3 Perspectives(RUP):
1) A dynamic perspective: 시간축을 중심으로 Inception, elaboration, construction, transition
네 개의 phase에서 iteration을 취함.
Inception(개념화 단계)
Elaboration(초기 아키텍쳐 구축 단계)
Construction(시스템 완성 단계)
Transition(시스템 이전 단계)
2) Static perspective: Workflow(=Process activity)를 process와 supporting으로 나눔.
Process workflow는 개발과 관련, supporting workflow는 process를 지원.
3) Practice perspective: 6가지 practice를 제안.
(1) Develop software iteratively
(2) Manage requirements
(3) Use component-based architectures
(4) Visually model software
(5) Verify software quality
(6) Control changes to software

5가지의 SW development model
1. Incremental development
2. Formal specification
3. Structured programming
4. Static verification using rigorous SW inspections
5. Statistical testing to determine program reliability
Cleanroom SW development model은 defect avoidance에 가까움.
이 모델은 잘 활용되지 않는데, 활용하기 위해서는 능력이 필요하기 때문...
-----------------------------------------------------------------------------------
